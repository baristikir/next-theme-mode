import{createContext as e,useContext as t,useState as o,useEffect as r}from"react";const n=e({}),c=()=>{const e=t(n);if(void 0===e)throw new Error("useTheme must  be  used within a ThemeModeContext  Provider");return e};function i({children:e},{themes:t}){const[c,i]=o("");return r(()=>{const e=window.document.documentElement.style.getPropertyValue("--initial-color-mode");i(e)},[]),React.createElement(n.Provider,{value:{colorMode:c,setColorMode:function(e){const o=window.document.documentElement;i(e),localStorage.setItem("color-mode",e),Object.entries(t[e]).forEach(([e,t])=>{o.style.setProperty(`--color-${e}`,String(t))})}}},e)}function s(){const e=function(){const e=window.localStorage.getItem("color-mode");if("string"==typeof e)return e;const t=window.matchMedia("(prefers-color-scheme: dark)");return"boolean"==typeof t.matches&&t.matches?"dark":"light"}(),t=document.documentElement;t.style.setProperty("--initial-color-mode",e),Object.entries("substitutedForTheme"[e]).forEach(([e,o])=>{t.style.setProperty(`--color-${e}`,String(o))})}function l(e){const t=String(s).replace("'substitutedForTheme'",JSON.stringify(e));return React.createElement("script",{id:"theme-rehydrate",dangerouslySetInnerHTML:{__html:`(${t})()`}})}export{l as ScriptHydrationTheme,n as ThemeContext,i as ThemeProvider,c as useTheme};
